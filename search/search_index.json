{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Accentra Identity Service","text":"<p>Accentra provides tenant-aware user management for multi-tenant SaaS products. The service exposes a FastAPI application that manages tenants, users, memberships, and access tokens. It is designed to run in a containerised environment with PostgreSQL for persistence and optional Redis-backed Dramatiq workers for background jobs.</p>"},{"location":"#architecture-at-a-glance","title":"Architecture at a Glance","text":"<ul> <li>FastAPI application (<code>src/main.py</code>) wires logging, observability, and the <code>users</code> router under <code>/identity</code>.</li> <li>Domain modules (<code>src/users</code>) implement SQLModel data structures, Pydantic schemas, authentication helpers, and the   service layer used by HTTP routes.</li> <li>Shared platform code (<code>src/core</code>) centralises configuration, database sessions, logging, and OpenTelemetry   integration.</li> <li>Migrations live in <code>alembic/</code> and provision the <code>identity</code> schema plus tenant/user tables.</li> <li>Tests (<code>tests/unit_tests</code>, <code>tests/integration_tests</code>) exercise API behaviour against a migrated database.</li> </ul>"},{"location":"#domain-concepts","title":"Domain Concepts","text":"<ul> <li>Tenant \u2013 logical customer account that owns seats and entitlement (<code>plan</code>) data.</li> <li>User \u2013 individual identity with login credentials and profile information.</li> <li>Membership \u2013 join table binding a user to a tenant with a role, scopes, and optional plan overrides.</li> <li>Access token \u2013 signed JWT encoding <code>sub</code> (user), <code>tid</code> (tenant), <code>role</code>, <code>scopes</code>, and optional <code>plan</code>.</li> </ul>"},{"location":"#request-lifecycle","title":"Request Lifecycle","text":"<ol> <li>Requests enter FastAPI with logging configured via <code>src/core/logging.py</code>.</li> <li><code>init_observability()</code> enables optional OpenTelemetry tracing/metrics exporters when configured.</li> <li>Route handlers resolve a SQLModel <code>Session</code> through <code>core.db.get_session_dependency</code>.</li> <li>Business logic executes inside <code>users.service</code>, committing changes through the session context.</li> <li>Responses serialise SQLModel objects into Pydantic DTOs defined in <code>users.schemas</code>.</li> </ol>"},{"location":"#when-to-use-the-service","title":"When to Use the Service","text":"<p>Use Accentra whenever you need:</p> <ul> <li>A drop-in identity service with multi-tenancy baked in.</li> <li>Consistent JWT access tokens enriched with tenant metadata.</li> <li>Safe password handling using PBKDF2 with 390k iterations.</li> <li>Schema migrations you can manage through Alembic alongside the application lifecycle.</li> </ul>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This guide walks through setting up a development environment, running the API, and executing the test suite.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.12</li> <li>uv for dependency and virtual-environment management</li> <li>PostgreSQL 15+ with a database created for the identity schema</li> <li>Redis (optional, required for Dramatiq workers)</li> </ul>"},{"location":"getting-started/#install-dependencies","title":"Install Dependencies","text":"<pre><code>uv sync\n</code></pre> <p>The command creates a virtual environment (if absent) and installs both runtime and development dependencies listed in <code>pyproject.toml</code>.</p>"},{"location":"getting-started/#configure-environment-variables","title":"Configure Environment Variables","text":"<p>Duplicate the provided <code>.env.example</code> (if present) or create a <code>.env</code> at the repository root with the following minimum settings:</p> <pre><code>POSTGRES_URL=postgresql://accentra:accentra@localhost:5432/accentra\nREDIS_URL=redis://localhost:6379/0\nJWT_SECRET_KEY=change-me\n</code></pre> <p>See <code>reference/settings.md</code> for the complete list of tunables and their defaults.</p>"},{"location":"getting-started/#apply-database-migrations","title":"Apply Database Migrations","text":"<pre><code>uv run alembic upgrade head\n</code></pre> <p>The Alembic environment expects <code>ALEMBIC_DATABASE_URL</code>. If it is not provided, the command falls back to <code>POSTGRES_URL</code>. Migrations create the <code>identity</code> schema plus tenant, user, and membership tables.</p>"},{"location":"getting-started/#run-the-api-locally","title":"Run the API Locally","text":"<pre><code>uv run uvicorn src.main:app --reload\n</code></pre> <p>The server listens on <code>http://127.0.0.1:8000</code>. Health endpoints are available at <code>/healthz</code> and <code>/readyz</code>. Mount the OpenAPI docs at <code>/docs</code> once authentication is configured.</p>"},{"location":"getting-started/#execute-tests-and-quality-gates","title":"Execute Tests and Quality Gates","text":"<pre><code>uv run pytest\nuv run ruff check .\nuv run ruff format .\nuv run pre-commit run --all-files\n</code></pre> <p>Integration tests expect a migrated PostgreSQL instance. Fixtures in <code>tests/conftest.py</code> will migrate and later drop the schema automatically when pointed at a dedicated test database.</p>"},{"location":"getting-started/#optional-launch-dramatiq-workers","title":"Optional: Launch Dramatiq Workers","text":"<p>If you add Dramatiq actors to the project, point them at the shared Redis broker declared in <code>core.queueing</code>. Once the broker is configured, start workers with:</p> <pre><code>uv run dramatiq path.to.module --processes 1 --threads 4 --broker core.queueing:broker\n</code></pre> <p>Replace <code>path.to.module</code> with the module that imports your actors so Dramatiq registers them on startup.</p>"},{"location":"operations/","title":"Operations","text":"<p>This section covers day-two activities for running Accentra in staging or production environments.</p>"},{"location":"operations/#health-probes","title":"Health Probes","text":"<ul> <li><code>GET /healthz</code> returns <code>{\"status\": \"ok\"}</code> and should be used for liveness checks.</li> <li><code>GET /readyz</code> returns <code>{\"status\": \"ready\"}</code> and should be paired with dependency verification (database, brokers).</li> </ul> <p>Both endpoints are anonymous and fast, making them suitable for Kubernetes-style probes.</p>"},{"location":"operations/#logging","title":"Logging","text":"<p><code>core.logging.configure_logging()</code> initialises stdlib logging with a structured format:</p> <pre><code>2024-12-10 09:32:17 INFO [uvicorn.access] 127.0.0.1:63328 - \"GET /identity/users/me HTTP/1.1\" 200\n</code></pre> <p>Configuration notes:</p> <ul> <li>Default log level is <code>INFO</code>, sourced from <code>Settings.log_level</code>.</li> <li>When <code>otel_logs_enabled</code> is <code>true</code> and <code>otlp_endpoint</code> is provided, logs are forwarded to the OTLP collector via the   HTTP exporter (requires optional OpenTelemetry packages).</li> </ul>"},{"location":"operations/#observability","title":"Observability","text":"<p><code>core.observability.init_observability()</code> prepares OpenTelemetry tracing and metrics:</p> <ul> <li>Controlled by <code>otel_traces_enabled</code> and <code>otel_metrics_enabled</code>.</li> <li>Requires <code>opentelemetry-sdk</code> and relevant OTLP exporters (<code>opentelemetry-exporter-otlp</code>).</li> <li>Uses service attributes <code>service.name</code>, <code>service.version</code>, and <code>deployment.environment</code>.</li> </ul> <p>Ensure the environment sets:</p> <pre><code>OTLP_ENDPOINT=https://otel-collector.example.com/v1/traces\nOTLP_HEADERS=Authorization=Bearer%20token,Other=Value\n</code></pre> <p>Headers are comma separated <code>key=value</code> pairs. Missing or malformed pairs are ignored.</p>"},{"location":"operations/#database-management","title":"Database Management","text":"<ul> <li>SQLModel models reside in <code>users.models</code> and target the <code>identity</code> schema.</li> <li>Migrations are managed by Alembic. Run <code>uv run alembic upgrade head</code> to reach the newest revision.</li> <li>During tests, fixtures in <code>tests/conftest.py</code> migrate the schema and drop it afterwards. Grant privileges if you run   the suite against a shared cluster.</li> <li><code>core.db.session_scope()</code> safely applies tenant context to PostgreSQL connections by setting session-local GUCs   <code>app.tenant_id</code> and <code>app.user_id</code>.</li> </ul>"},{"location":"operations/#engine-selection","title":"Engine Selection","text":"<ul> <li><code>POSTGRES_URL</code> / <code>DATABASE_URL</code> / <code>POSTGRESQL_URL</code> environment variables configure the runtime engine.</li> <li>For local experimentation you can point the service at SQLite; in-memory mode automatically activates a <code>StaticPool</code>.</li> </ul>"},{"location":"operations/#queueing","title":"Queueing","text":"<p><code>core.queueing</code> exposes a Redis-backed Dramatiq broker:</p> <ul> <li><code>core.queueing.setup_broker()</code> reconfigures the global broker (used by CLI invocations).</li> <li>Ensure <code>REDIS_URL</code> is provided; otherwise, the process exits with <code>RuntimeError</code>.</li> <li>When deploying, start workers with <code>dramatiq --broker core.queueing:broker</code> so that the central broker configuration   is reused.</li> </ul>"},{"location":"operations/#security-considerations","title":"Security Considerations","text":"<ul> <li>Do not rely on application-level enforcement to protect provisioning routes; add an API gateway or adjust the FastAPI   dependencies to require authentication for tenant and user management.</li> <li>Access tokens use symmetric signing (<code>HS256</code>). Rotate <code>jwt_secret_key</code> through standard secret management practices.</li> <li>PBKDF2 parameters are defined in <code>users.security.PBKDF_ITERATIONS</code>. Consider reviewing iteration counts periodically   to keep pace with hardware advances.</li> </ul>"},{"location":"operations/#backups-and-disaster-recovery","title":"Backups and Disaster Recovery","text":"<ul> <li>Take regular PostgreSQL snapshots that include the <code>identity</code> schema.</li> <li>If Redis queues store critical jobs, ensure persistence via AOF or external backpressure mechanisms.</li> </ul>"},{"location":"operations/#deployment-checklist","title":"Deployment Checklist","text":"<ul> <li>[ ] Populate <code>.env</code> with production secrets and URLs.</li> <li>[ ] Run <code>uv run alembic upgrade head</code>.</li> <li>[ ] Confirm <code>uv run pytest -q</code> passes in the build pipeline.</li> <li>[ ] Configure OTLP exporters or disable them explicitly to avoid startup warnings.</li> <li>[ ] Set up a cron or job to rotate and prune expired JWT secrets if you migrate to asymmetric keys.</li> </ul>"},{"location":"api/identity/","title":"Identity API","text":"<p>All routes are mounted under <code>/identity</code>. Unless stated otherwise, responses follow FastAPI's default JSON encoding and error structure (<code>{\"detail\": \"...\"}</code>).</p>"},{"location":"api/identity/#auth-tokens","title":"Auth Tokens","text":"<ul> <li>JWT bearer tokens are created via <code>POST /identity/auth/login</code>.</li> <li>The token payload includes <code>sub</code> (user id), <code>tid</code> (tenant id), <code>role</code>, <code>scopes</code>, <code>plan</code> (optional), <code>iat</code>, and <code>exp</code>.</li> <li>Only the <code>GET /identity/users/me</code> endpoint currently enforces authentication. Other routes should be protected by an   API gateway or future policy to avoid anonymous provisioning.</li> </ul> <p>Typical <code>Authorization</code> header:</p> <pre><code>Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...\n</code></pre>"},{"location":"api/identity/#tenants","title":"Tenants","text":""},{"location":"api/identity/#create-tenant","title":"Create tenant","text":"<ul> <li>Method &amp; path: <code>POST /identity/tenants</code></li> <li>Request body:</li> </ul> <pre><code>{\n  \"name\": \"Acme\",\n  \"plan\": {\n    \"tier\": \"pro\",\n    \"seats\": 50\n  }\n}\n</code></pre> <ul> <li>Success response: <code>201 Created</code> with the tenant document (UUIDs and timestamps populated).</li> <li>Errors: <code>409 Conflict</code> when a tenant with the same name already exists.</li> </ul>"},{"location":"api/identity/#retrieve-tenant","title":"Retrieve tenant","text":"<ul> <li>Method &amp; path: <code>GET /identity/tenants/{tenant_id}</code></li> <li>Auth: none</li> <li>Success response: <code>200 OK</code> with the tenant resource.</li> <li>Errors: <code>404 Not Found</code> when the tenant id is unknown.</li> </ul>"},{"location":"api/identity/#users","title":"Users","text":""},{"location":"api/identity/#create-user","title":"Create user","text":"<ul> <li>Method &amp; path: <code>POST /identity/users</code></li> <li>Request body:</li> </ul> <pre><code>{\n  \"email\": \"user@example.com\",\n  \"full_name\": \"Ada Lovelace\",\n  \"password\": \"s3cur3P@ss\",\n  \"is_active\": true\n}\n</code></pre> <ul> <li>Behaviour: Passwords are hashed with PBKDF2 (<code>sha256</code>, 390k iterations) before storage.</li> <li>Success response: <code>201 Created</code> with the user document (defaults applied) and an empty <code>memberships</code> array.</li> <li>Errors: <code>409 Conflict</code> when the email is already registered.</li> </ul>"},{"location":"api/identity/#retrieve-current-user","title":"Retrieve current user","text":"<ul> <li>Method &amp; path: <code>GET /identity/users/me</code></li> <li>Auth: bearer token required; uses the membership encoded in the JWT to look up role and scopes.</li> <li>Success response: <code>200 OK</code> with the user profile and memberships refreshed from the database.</li> <li>Errors: <code>401 Unauthorized</code> when the token is missing/invalid or the user is inactive. <code>403 Forbidden</code> when no   membership exists for the tenant in the token.</li> </ul>"},{"location":"api/identity/#retrieve-user-by-id","title":"Retrieve user by id","text":"<ul> <li>Method &amp; path: <code>GET /identity/users/{user_id}</code></li> <li>Auth: none by default (protect externally if needed).</li> <li>Success response: <code>200 OK</code> with the user profile and memberships.</li> <li>Errors: <code>404 Not Found</code> when the user id is unknown.</li> </ul>"},{"location":"api/identity/#update-user","title":"Update user","text":"<ul> <li>Method &amp; path: <code>PATCH /identity/users/{user_id}</code></li> <li>Body fields: any subset of <code>full_name</code>, <code>password</code>, and <code>is_active</code>. Omitting a field leaves it unchanged.</li> <li>Success response: <code>200 OK</code> with the updated profile.</li> <li>Errors: <code>404 Not Found</code> when the user id is unknown.</li> </ul>"},{"location":"api/identity/#memberships","title":"Memberships","text":""},{"location":"api/identity/#add-membership","title":"Add membership","text":"<ul> <li>Method &amp; path: <code>POST /identity/users/{user_id}/memberships</code></li> <li>Request body:</li> </ul> <pre><code>{\n  \"tenant_id\": \"1b36bcfa-5ab0-4dd1-8f2c-5b86debe92e1\",\n  \"role\": \"admin\",\n  \"scopes\": [\"billing:read\", \"users:write\"],\n  \"plan\": null\n}\n</code></pre> <ul> <li>Success response: <code>201 Created</code> with the membership record.</li> <li>Errors: <code>404 Not Found</code> when the user or tenant does not exist; <code>409 Conflict</code> when the membership already exists.</li> </ul>"},{"location":"api/identity/#list-memberships","title":"List memberships","text":"<p>Memberships are embedded in user responses. Use <code>GET /identity/users/{user_id}</code> or <code>.../users/me</code> to retrieve them.</p>"},{"location":"api/identity/#authentication","title":"Authentication","text":""},{"location":"api/identity/#login","title":"Login","text":"<ul> <li>Method &amp; path: <code>POST /identity/auth/login</code></li> <li>Request body:</li> </ul> <pre><code>{\n  \"email\": \"user@example.com\",\n  \"password\": \"s3cur3P@ss\",\n  \"tenant_id\": \"1b36bcfa-5ab0-4dd1-8f2c-5b86debe92e1\"\n}\n</code></pre> <ul> <li>Success response: <code>200 OK</code> with <code>{ \"access_token\": \"&lt;jwt&gt;\", \"token_type\": \"bearer\" }</code>.</li> <li>Errors:</li> <li><code>401 Unauthorized</code> when the credentials are incorrect or the user is inactive.</li> <li><code>403 Forbidden</code> when the user lacks membership for the supplied tenant.</li> </ul>"},{"location":"api/identity/#token-payload-example","title":"Token payload example","text":"<pre><code>{\n  \"sub\": \"f3c258fc-03b5-4a3d-86e6-6aa7d8acd053\",\n  \"tid\": \"1b36bcfa-5ab0-4dd1-8f2c-5b86debe92e1\",\n  \"role\": \"owner\",\n  \"scopes\": [\"*\"],\n  \"plan\": {\n    \"tier\": \"enterprise\"\n  },\n  \"iat\": 1733874840,\n  \"exp\": 1733878440,\n  \"iss\": \"accentra\",\n  \"aud\": \"accentra-clients\"\n}\n</code></pre>"},{"location":"reference/data-model/","title":"Data Model","text":"<p>Accentra persists identity data in the PostgreSQL <code>identity</code> schema using SQLModel. The schema is managed by Alembic migrations and comprises tenants, users, and memberships.</p>"},{"location":"reference/data-model/#tenants","title":"Tenants","text":"<ul> <li>Table: <code>identity.tenants</code></li> <li>Primary key: <code>id</code> (<code>UUID</code>)</li> <li>Unique constraints: <code>name</code></li> <li>Columns:</li> <li><code>name</code> \u2013 required tenant name (<code>VARCHAR(255)</code>).</li> <li><code>plan</code> \u2013 JSON payload describing the commercial plan or entitlements.</li> <li><code>created_at</code>, <code>updated_at</code> \u2013 UTC timestamps (<code>TIMESTAMP WITHOUT TIME ZONE</code>) with server defaults.</li> </ul> <p>Tenants can store arbitrary <code>plan</code> metadata, allowing downstream services to tailor behaviour based on entitlements.</p>"},{"location":"reference/data-model/#users","title":"Users","text":"<ul> <li>Table: <code>identity.users</code></li> <li>Primary key: <code>id</code> (<code>UUID</code>)</li> <li>Unique constraints: <code>email</code></li> <li>Columns:</li> <li><code>email</code> \u2013 login identifier (<code>VARCHAR(255)</code>) validated via <code>EmailStr</code>.</li> <li><code>full_name</code> \u2013 optional display name.</li> <li><code>hashed_password</code> \u2013 salted PBKDF2 digest (<code>SHA-256</code>, <code>390000</code> iterations).</li> <li><code>is_active</code> \u2013 Boolean flag defaulting to <code>TRUE</code>.</li> <li><code>created_at</code>, <code>updated_at</code> \u2013 UTC timestamps with server defaults.</li> </ul> <p>Passwords are stored as <code>&lt;salt_hex&gt;$&lt;digest_hex&gt;</code> and verified with <code>users.security.verify_password</code>.</p>"},{"location":"reference/data-model/#memberships","title":"Memberships","text":"<ul> <li>Table: <code>identity.user_tenants</code></li> <li>Primary key: <code>membership_id</code> (<code>UUID</code>)</li> <li>Unique constraints: <code>uq_user_tenant_membership</code> on (<code>user_id</code>, <code>tenant_id</code>)</li> <li>Columns:</li> <li><code>user_id</code> \u2013 foreign key to <code>identity.users.id</code>.</li> <li><code>tenant_id</code> \u2013 foreign key to <code>identity.tenants.id</code>.</li> <li><code>role</code> \u2013 enum (<code>owner</code>, <code>admin</code>, <code>editor</code>, <code>viewer</code>).</li> <li><code>scopes</code> \u2013 JSON array of strings describing fine-grained permissions.</li> <li><code>plan</code> \u2013 optional JSON override applied to the user's membership.</li> <li><code>created_at</code>, <code>updated_at</code> \u2013 UTC timestamps with server defaults.</li> </ul> <p>Roles encode coarse-grained access levels, while scopes enable feature flags or granular permissions. Membership payloads also carry <code>plan</code> overrides to support seat upgrades or beta features for specific members.</p>"},{"location":"reference/data-model/#access-context","title":"Access Context","text":"<p><code>core.db.session_scope()</code> can attach a tenant-aware access context to each SQL session. When connected to PostgreSQL, the function sets GUCs (<code>app.tenant_id</code>, <code>app.user_id</code>) that downstream triggers or policies can consume. The session also stores the identifiers in <code>session.info</code> for application-level logic.</p>"},{"location":"reference/settings/","title":"Configuration Reference","text":"<p>Application settings are provided through environment variables parsed by <code>core.config.Settings</code>. The table below lists each field, its default value, and usage notes.</p> Variable Default Notes <code>ENV</code> <code>production</code> Controls <code>deployment.environment</code> attribute for observability. Accepts <code>development</code>, <code>production</code>, <code>testing</code>. <code>APP_NAME</code> <code>Accentra</code> Used for FastAPI title and OpenTelemetry resource metadata. <code>DEBUG</code> <code>None</code> When <code>true</code>, enables SQLAlchemy echo for SQL debugging. <code>VERSION</code> <code>0.1.0</code> Displayed in the FastAPI docs and propagated to OTEL resource attributes. <code>ADMIN_EMAIL</code> <code>support@riskary.de</code> Informational contact value. <code>POSTGRES_URL</code> / <code>DATABASE_URL</code> / <code>POSTGRESQL_URL</code> required Database connection string. <code>pg_vector_url</code> ensures <code>postgresql://</code> prefix. <code>REDIS_URL</code> / <code>REDIS_URI</code> required Redis connection string for Dramatiq broker. <code>JWT_SECRET_KEY</code> <code>dev-secret-key</code> Symmetric secret used for JWT signing. Replace in production. <code>JWT_ALGORITHM</code> <code>HS256</code> Algorithm passed to PyJWT. <code>JWT_ACCESS_TOKEN_TTL_MINUTES</code> <code>60</code> Token lifetime in minutes. <code>JWT_ISSUER</code> <code>None</code> Optional <code>iss</code> claim. <code>JWT_AUDIENCE</code> <code>None</code> Optional <code>aud</code> claim. Disable audience verification by leaving unset. <code>LOG_LEVEL</code> <code>INFO</code> Global logging level (<code>DEBUG</code>, <code>INFO</code>, <code>WARNING</code>, <code>ERROR</code>, <code>CRITICAL</code>). <code>OTLP_ENDPOINT</code> <code>None</code> Base URL for OpenTelemetry OTLP exporters. Enables traces/metrics/logs when set. <code>OTLP_HEADERS</code> <code>None</code> Comma-separated <code>key=value</code> pairs forwarded to the OTLP exporters. <code>OTEL_LOGS_ENABLED</code> <code>False</code> Toggle OTLP log forwarding. Requires exporter packages. <code>OTEL_TRACES_ENABLED</code> <code>True</code> Toggle OTLP tracing exporter. <code>OTEL_METRICS_ENABLED</code> <code>True</code> Toggle OTLP metrics exporter. <code>INTERNAL_AUTH_TOKEN</code> <code>dev-internal-token</code> Shared secret for internal probes or service-to-service calls."},{"location":"reference/settings/#additional-environment-variables","title":"Additional Environment Variables","text":"<p>The tooling and tests recognise the following auxiliary variables:</p> <ul> <li><code>ALEMBIC_DATABASE_URL</code> \u2013 Explicit connection string for migrations. Falls back to <code>POSTGRES_URL</code> when unset.</li> <li><code>OPENAI_API_KEY</code> / <code>TAVILY_API_KEY</code> \u2013 Stubbed in <code>tests/conftest.py</code> to satisfy optional integrations. Set when running   features that depend on third-party services.</li> <li><code>REDIS_URL</code>, <code>POSTGRES_URL</code> \u2013 Seeded with test defaults in <code>tests/conftest.py</code> to promote isolated test runs.</li> </ul> <p>Place these values in the project root <code>.env</code>. <code>pydantic-settings</code> loads them automatically when the application starts.</p>"}]}